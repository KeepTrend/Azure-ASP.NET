@model Exchange.AzureModel.UserSignupPage
@{
    ViewBag.Title = "SignUp";
    Layout = "~/Views/Shared/LoginLayout.cshtml";
}

<link rel="stylesheet" href="~/vendor/intl-tel-input/build/css/intlTelInput.css">
<script src="~/vendor/intl-tel-input/build/js/intlTelInput.js"></script>
<script src="~/vendor/intl-tel-input/build/js/utils.js"></script>

@if (ViewBag.Status != null && Convert.ToBoolean(ViewBag.Status))
{
    if (ViewBag.Message != null)
    {
        <div class="alert alert-success">
            
            <p>@ViewBag.Message</p>
        </div>
        <div>
            @Html.ActionLink("SignIn", "Login", "User_Login", htmlAttributes: new { @class = "txt1" })
        </div>
    }
}
else
{
    if (ViewBag.Message != null)
    {
        <div class="alert alert-danger">
            <strong>Error!</strong>
            <p>@ViewBag.Message</p>
        </div>
    }
    using (Html.BeginForm("Registeration", "User_Login", FormMethod.Post, new { @class = "login100-form validate-form flex-sb flex-w", role = "form" }))
    {
        @Html.AntiForgeryToken()
        <span class="login100-form-title p-b-51">
            Signup
        </span>
        <div class="wrap-input100 validate-input m-b-16" data-validate="Firstname is required">
            @Html.EditorFor(model => model.firstname, new { htmlAttributes = new { @class = "input100", @placeholder = "First name", @name = "firstname" } })
            <span class="focus-input100"></span>
        </div>

        <div class="wrap-input100 validate-input m-b-16" data-validate="Lastname is required">
            @Html.EditorFor(model => model.lastname, new { htmlAttributes = new { @class = "input100", @placeholder = "Last name", @name = "lastname" } })
            <span class="focus-input100"></span>
        </div>

        <div class="wrap-input100 validate-input m-b-16" data-validate="Username is required">
            @Html.EditorFor(model => model.username, new { htmlAttributes = new { @class = "input100", @placeholder = "Username", @name = "username" } })
            <span class="focus-input100"></span>
        </div>

        <div class="wrap-input100 validate-input m-b-16" data-validate="Email is required">
            @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "input100", @placeholder = "Email", @name = "email" } })
            <span class="focus-input100"></span>
        </div>

        <div class="wrap-input100 validate-input m-b-16" data-validate="Phone number is required">
            @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "input100", @placeholder = "Phone number", @name = "phone" , @readonly = "readonly"} })
            <span class="focus-input100"></span>
        </div>

        <div class="wrap-input100 validate-input m-b-16" data-validate="Password must consists of at least 8 characters">
            <input class="input100" type="password" name="password" placeholder="Password">
            <span class="focus-input100"></span>
        </div>

        <div class="wrap-input100 validate-input m-b-16" data-validate="Confirm Password should be same as password">
            <input class="input100" type="password" name="confirm" placeholder="Confirm Password">
            <span class="focus-input100"></span>
        </div>

        <div class="container-login100-form-btn m-t-17">
            <button class="btn login100-form-btn btn-signup">
                Create New One
            </button>
        </div>
    }
}

<script>
    $(document).ready(function () {
        var input = document.querySelector("#phone");
        var iti = window.intlTelInput(input, {
            initialCountry: "auto",
            separateDialCode: true,
            geoIpLookup: function (callback) {
                $.get('https://ipinfo.io', function () { }, "jsonp").always(function (resp) {
                    var countryCode = (resp && resp.country) ? resp.country : "";
                    callback(countryCode);
                });
            },
            utilsScript: "~vendor/intl-tel-input/build/js/utils.js?1537727621611" // just for formatting/placeholders etc
        });
        iti.setNumber("@ViewData["phoneNumber"].ToString()");
    });
</script>